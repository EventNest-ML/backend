name: Build and Deploy

on:
  push:
    branches: [ master ]

env:
  REGISTRY: gcr.io
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  API_IMAGE_NAME: ${{ secrets.API_IMAGE_NAME }}
  NGINX_IMAGE_NAME: ${{ secrets.NGINX_IMAGE_NAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    outputs:
      api-image-tag: ${{ steps.api-meta.outputs.tags }}
      nginx-image-tag: ${{ steps.nginx-meta.outputs.tags }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract API metadata
        id: api-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.API_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-

      - name: Extract Nginx metadata
        id: nginx-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.NGINX_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-

      - name: Build and push API Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/production/django/Dockerfile
          push: true
          tags: ${{ steps.api-meta.outputs.tags }}
          labels: ${{ steps.api-meta.outputs.labels }}
          cache-from: type=gha,scope=api
          cache-to: type=gha,mode=max,scope=api

      - name: Build and push Nginx Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./docker/production/nginx
          file: ./docker/production/nginx/Dockerfile
          push: true
          tags: ${{ steps.nginx-meta.outputs.tags }}
          labels: ${{ steps.nginx-meta.outputs.labels }}
          cache-from: type=gha,scope=nginx
          cache-to: type=gha,mode=max,scope=nginx

  trigger-argocd-sync:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
      - name: Sync ArgoCD Application
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd
          
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --grpc-web --insecure
          
          argocd app sync ${{ secrets.ARGOCD_APP_NAME }} --force
          argocd app wait ${{ secrets.ARGOCD_APP_NAME }} --health